{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar PropTypes = _interopDefault(require('prop-types'));\n\nfunction parentPosition(element) {\n  var rect = element.getBoundingClientRect();\n  return {\n    x: rect.left,\n    y: rect.top\n  };\n}\n\nfunction parentHasClass(element, className) {\n  while (element) {\n    if (element.classList && element.classList.contains(className)) {\n      return true;\n    }\n\n    element = element.offsetParent;\n  }\n\n  return false;\n}\n\nfunction debounce(func, wait) {\n  var timeout = void 0;\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var context = this;\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      return func.apply(context, args);\n    }, wait);\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ANIMATION_TIME = 300;\nvar DIAGONAL_THROW_TIME = 1500;\nvar SCROLL_PIXELS_FOR_ZOOM_LEVEL = 150;\nvar MIN_DRAG_FOR_THROW = 40;\nvar CLICK_TOLERANCE = 2;\nvar DOUBLE_CLICK_DELAY = 300;\nvar DEBOUNCE_DELAY = 60;\nvar PINCH_RELEASE_THROW_DELAY = 300;\nvar WARNING_DISPLAY_TIMEOUT = 300;\n\nvar NOOP = function NOOP() {};\n\nfunction wikimedia(x, y, z, dpr) {\n  var retina = typeof dpr !== 'undefined' ? dpr >= 2 : typeof window !== 'undefined' && window.devicePixelRatio >= 2;\n  return 'https://maps.wikimedia.org/osm-intl/' + z + '/' + x + '/' + y + (retina ? '@2x' : '') + '.png';\n} // https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames\n\n\nvar lng2tile = function lng2tile(lon, zoom) {\n  return (lon + 180) / 360 * Math.pow(2, zoom);\n};\n\nvar lat2tile = function lat2tile(lat, zoom) {\n  return (1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom);\n};\n\nfunction tile2lng(x, z) {\n  return x / Math.pow(2, z) * 360 - 180;\n}\n\nfunction tile2lat(y, z) {\n  var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);\n  return 180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n}\n\nfunction getMousePixel(dom, event) {\n  var parent = parentPosition(dom);\n  return [event.clientX - parent.x, event.clientY - parent.y];\n}\n\nfunction easeOutQuad(t) {\n  return t * (2 - t);\n} // minLat, maxLat, minLng, maxLng\n\n\nvar absoluteMinMax = [tile2lat(Math.pow(2, 10), 10), tile2lat(0, 10), tile2lng(0, 10), tile2lng(Math.pow(2, 10), 10)];\nvar hasWindow = typeof window !== 'undefined';\nvar performanceNow = hasWindow && window.performance && window.performance.now ? function () {\n  return window.performance.now();\n} : function () {\n  var timeStart = new Date().getTime();\n  return function () {\n    return new Date().getTime() - timeStart;\n  };\n}();\nvar requestAnimationFrame = hasWindow ? window.requestAnimationFrame || window.setTimeout : function (callback) {\n  return callback();\n};\nvar cancelAnimationFrame = hasWindow ? window.cancelAnimationFrame || window.clearTimeout : function () {};\n\nfunction srcSet(dprs, url, x, y, z) {\n  if (!dprs || dprs.length === 0) {\n    return '';\n  }\n\n  return dprs.map(function (dpr) {\n    return url(x, y, z, dpr) + (dpr === 1 ? '' : ' ' + dpr + 'x');\n  }).join(', ');\n}\n\nvar Map = function (_Component) {\n  _inherits(Map, _Component);\n\n  function Map(props) {\n    _classCallCheck(this, Map);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.updateWidthHeight = function () {\n      if (_this._containerRef) {\n        var rect = _this._containerRef.getBoundingClientRect();\n\n        if (rect && rect.width > 0 && rect.height > 0) {\n          _this.setState({\n            width: rect.width,\n            height: rect.height\n          });\n\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _this.wa = function (e, t, o) {\n      return window.addEventListener(e, t, o);\n    };\n\n    _this.wr = function (e, t) {\n      return window.removeEventListener(e, t);\n    };\n\n    _this.bindMouseEvents = function () {\n      _this.wa('mousedown', _this.handleMouseDown);\n\n      _this.wa('mouseup', _this.handleMouseUp);\n\n      _this.wa('mousemove', _this.handleMouseMove);\n    };\n\n    _this.bindTouchEvents = function () {\n      _this.wa('touchstart', _this.handleTouchStart, {\n        passive: false\n      });\n\n      _this.wa('touchmove', _this.handleTouchMove, {\n        passive: false\n      });\n\n      _this.wa('touchend', _this.handleTouchEnd, {\n        passive: false\n      });\n    };\n\n    _this.unbindMouseEvents = function () {\n      _this.wr('mousedown', _this.handleMouseDown);\n\n      _this.wr('mouseup', _this.handleMouseUp);\n\n      _this.wr('mousemove', _this.handleMouseMove);\n    };\n\n    _this.unbindTouchEvents = function () {\n      _this.wr('touchstart', _this.handleTouchStart);\n\n      _this.wr('touchmove', _this.handleTouchMove);\n\n      _this.wr('touchend', _this.handleTouchEnd);\n    };\n\n    _this.bindResizeEvent = function () {\n      _this.wa('resize', _this.updateWidthHeight);\n    };\n\n    _this.unbindResizeEvent = function () {\n      _this.wr('resize', _this.updateWidthHeight);\n    };\n\n    _this.bindWheelEvent = function () {\n      if (_this._containerRef) {\n        _this._containerRef.addEventListener('wheel', _this.handleWheel, {\n          passive: false\n        });\n      }\n    };\n\n    _this.unbindWheelEvent = function () {\n      if (_this._containerRef) {\n        _this._containerRef.removeEventListener('wheel', _this.handleWheel);\n      }\n    };\n\n    _this.setCenterZoomTarget = function (center, zoom) {\n      var fromProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var zoomAround = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var animationDuration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : ANIMATION_TIME;\n\n      if (_this.props.animate && (!fromProps || _this.distanceInScreens(center, zoom, _this.state.center, _this.state.zoom) <= _this.props.animateMaxScreens)) {\n        if (_this._isAnimating) {\n          cancelAnimationFrame(_this._animFrame);\n\n          var _this$animationStep = _this.animationStep(performanceNow()),\n              centerStep = _this$animationStep.centerStep,\n              zoomStep = _this$animationStep.zoomStep;\n\n          _this._centerStart = centerStep;\n          _this._zoomStart = zoomStep;\n        } else {\n          _this._isAnimating = true;\n          _this._centerStart = _this.limitCenterAtZoom([_this._lastCenter[0], _this._lastCenter[1]], _this._lastZoom);\n          _this._zoomStart = _this._lastZoom;\n\n          _this.onAnimationStart();\n        }\n\n        _this._animationStart = performanceNow();\n        _this._animationEnd = _this._animationStart + animationDuration;\n\n        if (zoomAround) {\n          _this._zoomAround = zoomAround;\n          _this._centerTarget = _this.calculateZoomCenter(_this._lastCenter, zoomAround, _this._lastZoom, zoom);\n        } else {\n          _this._zoomAround = null;\n          _this._centerTarget = center;\n        }\n\n        _this._zoomTarget = zoom;\n        _this._animFrame = requestAnimationFrame(_this.animate);\n      } else {\n        _this.stopAnimating();\n\n        if (zoomAround) {\n          var _center = _this.calculateZoomCenter(_this._lastCenter, zoomAround, _this._lastZoom, zoom);\n\n          _this.setCenterZoom(_center, zoom, fromProps);\n        } else {\n          _this.setCenterZoom(center, zoom, fromProps);\n        }\n      }\n    };\n\n    _this.distanceInScreens = function (centerTarget, zoomTarget, center, zoom) {\n      var _this$state = _this.state,\n          width = _this$state.width,\n          height = _this$state.height; // distance in pixels at the current zoom level\n\n      var l1 = _this.latLngToPixel(center, center, zoom);\n\n      var l2 = _this.latLngToPixel(centerTarget, center, zoom); // distance in pixels at the target zoom level (could be the same)\n\n\n      var z1 = _this.latLngToPixel(center, center, zoomTarget);\n\n      var z2 = _this.latLngToPixel(centerTarget, center, zoomTarget); // take the average between the two and divide by width or height to get the distance multiplier in screens\n\n\n      var w = (Math.abs(l1[0] - l2[0]) + Math.abs(z1[0] - z2[0])) / 2 / width;\n      var h = (Math.abs(l1[1] - l2[1]) + Math.abs(z1[1] - z2[1])) / 2 / height; // return the distance\n\n      return Math.sqrt(w * w + h * h);\n    };\n\n    _this.animationStep = function (timestamp) {\n      var length = _this._animationEnd - _this._animationStart;\n      var progress = Math.max(timestamp - _this._animationStart, 0);\n      var percentage = easeOutQuad(progress / length);\n      var zoomDiff = (_this._zoomTarget - _this._zoomStart) * percentage;\n      var zoomStep = _this._zoomStart + zoomDiff;\n\n      if (_this._zoomAround) {\n        var centerStep = _this.calculateZoomCenter(_this._centerStart, _this._zoomAround, _this._zoomStart, zoomStep);\n\n        return {\n          centerStep: centerStep,\n          zoomStep: zoomStep\n        };\n      } else {\n        var _centerStep = [_this._centerStart[0] + (_this._centerTarget[0] - _this._centerStart[0]) * percentage, _this._centerStart[1] + (_this._centerTarget[1] - _this._centerStart[1]) * percentage];\n        return {\n          centerStep: _centerStep,\n          zoomStep: zoomStep\n        };\n      }\n    };\n\n    _this.animate = function (timestamp) {\n      if (timestamp >= _this._animationEnd) {\n        _this._isAnimating = false;\n\n        _this.setCenterZoom(_this._centerTarget, _this._zoomTarget, true);\n\n        _this.onAnimationStop();\n      } else {\n        var _this$animationStep2 = _this.animationStep(timestamp),\n            centerStep = _this$animationStep2.centerStep,\n            zoomStep = _this$animationStep2.zoomStep;\n\n        _this.setCenterZoom(centerStep, zoomStep);\n\n        _this._animFrame = requestAnimationFrame(_this.animate);\n      }\n    };\n\n    _this.stopAnimating = function () {\n      if (_this._isAnimating) {\n        _this._isAnimating = false;\n\n        _this.onAnimationStop();\n\n        cancelAnimationFrame(_this._animFrame);\n      }\n    };\n\n    _this.limitCenterAtZoom = function (center, zoom) {\n      // [minLat, maxLat, minLng, maxLng]\n      var minMax = _this.getBoundsMinMax(zoom || _this.state.zoom);\n\n      return [Math.max(Math.min(isNaN(center[0]) ? _this.state.center[0] : center[0], minMax[1]), minMax[0]), Math.max(Math.min(isNaN(center[1]) ? _this.state.center[1] : center[1], minMax[3]), minMax[2])];\n    };\n\n    _this.onAnimationStart = function () {\n      _this.props.onAnimationStart && _this.props.onAnimationStart();\n    };\n\n    _this.onAnimationStop = function () {\n      _this.props.onAnimationStop && _this.props.onAnimationStop();\n    };\n\n    _this.setCenterZoom = function (center, zoom) {\n      var animationEnded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      var limitedCenter = _this.limitCenterAtZoom(center, zoom);\n\n      if (Math.round(_this.state.zoom) !== Math.round(zoom)) {\n        var tileValues = _this.tileValues(_this.state);\n\n        var nextValues = _this.tileValues({\n          center: limitedCenter,\n          zoom: zoom,\n          width: _this.state.width,\n          height: _this.state.height\n        });\n\n        var oldTiles = _this.state.oldTiles;\n\n        _this.setState({\n          oldTiles: oldTiles.filter(function (o) {\n            return o.roundedZoom !== tileValues.roundedZoom;\n          }).concat(tileValues)\n        }, NOOP);\n\n        var loadTracker = {};\n\n        for (var x = nextValues.tileMinX; x <= nextValues.tileMaxX; x++) {\n          for (var y = nextValues.tileMinY; y <= nextValues.tileMaxY; y++) {\n            var key = x + '-' + y + '-' + nextValues.roundedZoom;\n            loadTracker[key] = false;\n          }\n        }\n\n        _this._loadTracker = loadTracker;\n      }\n\n      _this.setState({\n        center: limitedCenter,\n        zoom: zoom\n      }, NOOP);\n\n      var maybeZoom = _this.props.zoom ? _this.props.zoom : _this._lastZoom;\n      var maybeCenter = _this.props.center ? _this.props.center : _this._lastCenter;\n\n      if (animationEnded || Math.abs(maybeZoom - zoom) > 0.001 || Math.abs(maybeCenter[0] - limitedCenter[0]) > 0.00001 || Math.abs(maybeCenter[1] - limitedCenter[1]) > 0.00001) {\n        _this._lastZoom = zoom;\n        _this._lastCenter = [].concat(limitedCenter);\n\n        _this.syncToProps(limitedCenter, zoom);\n      }\n    };\n\n    _this.getBoundsMinMax = function (zoom) {\n      if (_this.props.limitBounds === 'center') {\n        return absoluteMinMax;\n      }\n\n      var _this$state2 = _this.state,\n          width = _this$state2.width,\n          height = _this$state2.height;\n\n      if (_this._minMaxCache && _this._minMaxCache[0] === zoom && _this._minMaxCache[1] === width && _this._minMaxCache[2] === height) {\n        return _this._minMaxCache[3];\n      }\n\n      var pixelsAtZoom = Math.pow(2, zoom) * 256;\n      var minLng = width > pixelsAtZoom ? 0 : tile2lng(width / 512, zoom); // x\n\n      var minLat = height > pixelsAtZoom ? 0 : tile2lat(Math.pow(2, zoom) - height / 512, zoom); // y\n\n      var maxLng = width > pixelsAtZoom ? 0 : tile2lng(Math.pow(2, zoom) - width / 512, zoom); // x\n\n      var maxLat = height > pixelsAtZoom ? 0 : tile2lat(height / 512, zoom); // y\n\n      var minMax = [minLat, maxLat, minLng, maxLng];\n      _this._minMaxCache = [zoom, width, height, minMax];\n      return minMax;\n    };\n\n    _this.imageLoaded = function (key) {\n      if (_this._loadTracker && key in _this._loadTracker) {\n        _this._loadTracker[key] = true;\n        var unloadedCount = Object.keys(_this._loadTracker).filter(function (k) {\n          return !_this._loadTracker[k];\n        }).length;\n\n        if (unloadedCount === 0) {\n          _this.setState({\n            oldTiles: []\n          }, NOOP);\n        }\n      }\n    };\n\n    _this.handleTouchStart = function (event) {\n      if (!_this._containerRef) {\n        return;\n      }\n\n      if (event.target && parentHasClass(event.target, 'pigeon-drag-block')) {\n        return;\n      }\n\n      if (event.touches.length === 1) {\n        var touch = event.touches[0];\n        var pixel = getMousePixel(_this._containerRef, touch);\n\n        if (_this.coordsInside(pixel)) {\n          _this._touchStartPixel = [pixel];\n\n          if (!_this.props.twoFingerDrag) {\n            _this.stopAnimating();\n\n            if (_this._lastTap && performanceNow() - _this._lastTap < DOUBLE_CLICK_DELAY) {\n              event.preventDefault();\n\n              var latLngNow = _this.pixelToLatLng(_this._touchStartPixel[0]);\n\n              _this.setCenterZoomTarget(null, Math.max(_this.props.minZoom, Math.min(_this.state.zoom + 1, _this.props.maxZoom)), false, latLngNow);\n            } else {\n              _this._lastTap = performanceNow();\n\n              _this.trackMoveEvents(pixel);\n            }\n          }\n        } // added second finger and first one was in the area\n\n      } else if (event.touches.length === 2 && _this._touchStartPixel) {\n        event.preventDefault();\n\n        _this.stopTrackingMoveEvents();\n\n        if (_this.state.pixelDelta || _this.state.zoomDelta) {\n          _this.sendDeltaChange();\n        }\n\n        var t1 = getMousePixel(_this._containerRef, event.touches[0]);\n        var t2 = getMousePixel(_this._containerRef, event.touches[1]);\n        _this._touchStartPixel = [t1, t2];\n        _this._touchStartMidPoint = [(t1[0] + t2[0]) / 2, (t1[1] + t2[1]) / 2];\n        _this._touchStartDistance = Math.sqrt(Math.pow(t1[0] - t2[0], 2) + Math.pow(t1[1] - t2[1], 2));\n      }\n    };\n\n    _this.handleTouchMove = function (event) {\n      if (!_this._containerRef) {\n        _this._touchStartPixel = null;\n        return;\n      }\n\n      if (event.touches.length === 1 && _this._touchStartPixel) {\n        var touch = event.touches[0];\n        var pixel = getMousePixel(_this._containerRef, touch);\n\n        if (_this.props.twoFingerDrag) {\n          if (_this.coordsInside(pixel)) {\n            _this.showWarning('fingers');\n          }\n        } else {\n          event.preventDefault();\n\n          _this.trackMoveEvents(pixel);\n\n          _this.setState({\n            pixelDelta: [pixel[0] - _this._touchStartPixel[0][0], pixel[1] - _this._touchStartPixel[0][1]]\n          }, NOOP);\n        }\n      } else if (event.touches.length === 2 && _this._touchStartPixel) {\n        var _this$state3 = _this.state,\n            width = _this$state3.width,\n            height = _this$state3.height,\n            zoom = _this$state3.zoom;\n        event.preventDefault();\n        var t1 = getMousePixel(_this._containerRef, event.touches[0]);\n        var t2 = getMousePixel(_this._containerRef, event.touches[1]);\n        var midPoint = [(t1[0] + t2[0]) / 2, (t1[1] + t2[1]) / 2];\n        var midPointDiff = [midPoint[0] - _this._touchStartMidPoint[0], midPoint[1] - _this._touchStartMidPoint[1]];\n        var distance = Math.sqrt(Math.pow(t1[0] - t2[0], 2) + Math.pow(t1[1] - t2[1], 2));\n        var zoomDelta = Math.max(_this.props.minZoom, Math.min(_this.props.maxZoom, zoom + Math.log2(distance / _this._touchStartDistance))) - zoom;\n        var scale = Math.pow(2, zoomDelta);\n        var centerDiffDiff = [(width / 2 - midPoint[0]) * (scale - 1), (height / 2 - midPoint[1]) * (scale - 1)];\n\n        _this.setState({\n          zoomDelta: zoomDelta,\n          pixelDelta: [centerDiffDiff[0] + midPointDiff[0] * scale, centerDiffDiff[1] + midPointDiff[1] * scale]\n        }, NOOP);\n      }\n    };\n\n    _this.handleTouchEnd = function (event) {\n      if (!_this._containerRef) {\n        _this._touchStartPixel = null;\n        return;\n      }\n\n      if (_this._touchStartPixel) {\n        var _this$props = _this.props,\n            zoomSnap = _this$props.zoomSnap,\n            twoFingerDrag = _this$props.twoFingerDrag,\n            minZoom = _this$props.minZoom,\n            maxZoom = _this$props.maxZoom;\n        var zoomDelta = _this.state.zoomDelta;\n\n        var _this$sendDeltaChange = _this.sendDeltaChange(),\n            center = _this$sendDeltaChange.center,\n            zoom = _this$sendDeltaChange.zoom;\n\n        if (event.touches.length === 0) {\n          if (twoFingerDrag) {\n            _this.clearWarning();\n          } else {\n            // if the click started and ended at about\n            // the same place we can view it as a click\n            // and not prevent default behavior.\n            var oldTouchPixel = _this._touchStartPixel[0];\n            var newTouchPixel = getMousePixel(_this._containerRef, event.changedTouches[0]);\n\n            if (Math.abs(oldTouchPixel[0] - newTouchPixel[0]) > CLICK_TOLERANCE || Math.abs(oldTouchPixel[1] - newTouchPixel[1]) > CLICK_TOLERANCE) {\n              // don't throw immediately after releasing the second finger\n              if (!_this._secondTouchEnd || performanceNow() - _this._secondTouchEnd > PINCH_RELEASE_THROW_DELAY) {\n                event.preventDefault();\n\n                _this.throwAfterMoving(newTouchPixel, center, zoom);\n              }\n            }\n\n            _this._touchStartPixel = null;\n            _this._secondTouchEnd = null;\n          }\n        } else if (event.touches.length === 1) {\n          event.preventDefault();\n          var touch = getMousePixel(_this._containerRef, event.touches[0]);\n          _this._secondTouchEnd = performanceNow();\n          _this._touchStartPixel = [touch];\n\n          _this.trackMoveEvents(touch);\n\n          if (zoomSnap) {\n            // if somehow we have no midpoint for the two finger touch, just take the center of the map\n            var latLng = _this._touchStartMidPoint ? _this.pixelToLatLng(_this._touchStartMidPoint) : _this.state.center;\n            var zoomTarget = void 0; // do not zoom up/down if we must drag with 2 fingers and didn't change the zoom level\n\n            if (twoFingerDrag && Math.round(_this.state.zoom) === Math.round(_this.state.zoom + zoomDelta)) {\n              zoomTarget = Math.round(_this.state.zoom);\n            } else {\n              zoomTarget = zoomDelta > 0 ? Math.ceil(_this.state.zoom) : Math.floor(_this.state.zoom);\n            }\n\n            var _zoom = Math.max(minZoom, Math.min(zoomTarget, maxZoom));\n\n            _this.setCenterZoomTarget(latLng, _zoom, false, latLng);\n          }\n        }\n      }\n    };\n\n    _this.handleMouseDown = function (event) {\n      if (!_this._containerRef) {\n        return;\n      }\n\n      var pixel = getMousePixel(_this._containerRef, event);\n\n      if (event.button === 0 && (!event.target || !parentHasClass(event.target, 'pigeon-drag-block')) && _this.coordsInside(pixel)) {\n        _this.stopAnimating();\n\n        event.preventDefault();\n\n        if (_this._lastClick && performanceNow() - _this._lastClick < DOUBLE_CLICK_DELAY) {\n          var latLngNow = _this.pixelToLatLng(_this._mousePosition || pixel);\n\n          _this.setCenterZoomTarget(null, Math.max(_this.props.minZoom, Math.min(_this.state.zoom + 1, _this.props.maxZoom)), false, latLngNow);\n        } else {\n          _this._lastClick = performanceNow();\n          _this._mouseDown = true;\n          _this._dragStart = pixel;\n\n          _this.trackMoveEvents(pixel);\n        }\n      }\n    };\n\n    _this.handleMouseMove = function (event) {\n      if (!_this._containerRef) {\n        return;\n      }\n\n      _this._mousePosition = getMousePixel(_this._containerRef, event);\n\n      if (_this._mouseDown && _this._dragStart) {\n        _this.trackMoveEvents(_this._mousePosition);\n\n        _this.setState({\n          pixelDelta: [_this._mousePosition[0] - _this._dragStart[0], _this._mousePosition[1] - _this._dragStart[1]]\n        }, NOOP);\n      }\n    };\n\n    _this.handleMouseUp = function (event) {\n      if (!_this._containerRef) {\n        _this._mouseDown = false;\n        return;\n      }\n\n      var pixelDelta = _this.state.pixelDelta;\n\n      if (_this._mouseDown) {\n        _this._mouseDown = false;\n        var pixel = getMousePixel(_this._containerRef, event);\n\n        if (_this.props.onClick && (!event.target || !parentHasClass(event.target, 'pigeon-click-block')) && (!pixelDelta || Math.abs(pixelDelta[0]) + Math.abs(pixelDelta[1]) <= CLICK_TOLERANCE)) {\n          var latLng = _this.pixelToLatLng(pixel);\n\n          _this.props.onClick({\n            event: event,\n            latLng: latLng,\n            pixel: pixel\n          });\n\n          _this.setState({\n            pixelDelta: null\n          }, NOOP);\n        } else {\n          var _this$sendDeltaChange2 = _this.sendDeltaChange(),\n              center = _this$sendDeltaChange2.center,\n              zoom = _this$sendDeltaChange2.zoom;\n\n          _this.throwAfterMoving(pixel, center, zoom);\n        }\n      }\n    };\n\n    _this.stopTrackingMoveEvents = function () {\n      _this._moveEvents = [];\n    };\n\n    _this.trackMoveEvents = function (coords) {\n      var timestamp = performanceNow();\n\n      if (_this._moveEvents.length === 0 || timestamp - _this._moveEvents[_this._moveEvents.length - 1].timestamp > 40) {\n        _this._moveEvents.push({\n          timestamp: timestamp,\n          coords: coords\n        });\n\n        if (_this._moveEvents.length > 2) {\n          _this._moveEvents.shift();\n        }\n      }\n    };\n\n    _this.throwAfterMoving = function (coords, center, zoom) {\n      var _this$state4 = _this.state,\n          width = _this$state4.width,\n          height = _this$state4.height;\n      var animate = _this.props.animate;\n      var timestamp = performanceNow();\n\n      var lastEvent = _this._moveEvents.shift();\n\n      if (lastEvent && animate) {\n        var deltaMs = Math.max(timestamp - lastEvent.timestamp, 1);\n        var delta = [(coords[0] - lastEvent.coords[0]) / deltaMs * 120, (coords[1] - lastEvent.coords[1]) / deltaMs * 120];\n        var distance = Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n\n        if (distance > MIN_DRAG_FOR_THROW) {\n          var diagonal = Math.sqrt(width * width + height * height);\n          var throwTime = DIAGONAL_THROW_TIME * distance / diagonal;\n          var lng = tile2lng(lng2tile(center[1], zoom) - delta[0] / 256.0, zoom);\n          var lat = tile2lat(lat2tile(center[0], zoom) - delta[1] / 256.0, zoom);\n\n          _this.setCenterZoomTarget([lat, lng], zoom, false, null, throwTime);\n        }\n      }\n\n      _this.stopTrackingMoveEvents();\n    };\n\n    _this.sendDeltaChange = function () {\n      var _this$state5 = _this.state,\n          center = _this$state5.center,\n          zoom = _this$state5.zoom,\n          pixelDelta = _this$state5.pixelDelta,\n          zoomDelta = _this$state5.zoomDelta;\n      var lat = center[0];\n      var lng = center[1];\n\n      if (pixelDelta || zoomDelta !== 0) {\n        lng = tile2lng(lng2tile(center[1], zoom + zoomDelta) - (pixelDelta ? pixelDelta[0] / 256.0 : 0), zoom + zoomDelta);\n        lat = tile2lat(lat2tile(center[0], zoom + zoomDelta) - (pixelDelta ? pixelDelta[1] / 256.0 : 0), zoom + zoomDelta);\n\n        _this.setCenterZoom([lat, lng], zoom + zoomDelta);\n      }\n\n      _this.setState({\n        pixelDelta: null,\n        zoomDelta: 0\n      }, NOOP);\n\n      return {\n        center: _this.limitCenterAtZoom([lat, lng], zoom + zoomDelta),\n        zoom: zoom + zoomDelta\n      };\n    };\n\n    _this.getBounds = function () {\n      var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.center;\n      var zoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.zoomPlusDelta();\n      var _this$state6 = _this.state,\n          width = _this$state6.width,\n          height = _this$state6.height;\n      return {\n        ne: _this.pixelToLatLng([width - 1, 0], center, zoom),\n        sw: _this.pixelToLatLng([0, height - 1], center, zoom)\n      };\n    };\n\n    _this.syncToProps = function () {\n      var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.center;\n      var zoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.state.zoom;\n      var onBoundsChanged = _this.props.onBoundsChanged;\n\n      if (onBoundsChanged) {\n        var bounds = _this.getBounds(center, zoom);\n\n        onBoundsChanged({\n          center: center,\n          zoom: zoom,\n          bounds: bounds,\n          initial: !_this._boundsSynced\n        });\n        _this._boundsSynced = true;\n      }\n    };\n\n    _this.handleWheel = function (event) {\n      var _this$props2 = _this.props,\n          mouseEvents = _this$props2.mouseEvents,\n          metaWheelZoom = _this$props2.metaWheelZoom,\n          zoomSnap = _this$props2.zoomSnap,\n          animate = _this$props2.animate;\n\n      if (!mouseEvents) {\n        return;\n      }\n\n      if (!metaWheelZoom || event.metaKey) {\n        event.preventDefault();\n        var addToZoom = -event.deltaY / SCROLL_PIXELS_FOR_ZOOM_LEVEL;\n\n        if (!zoomSnap && _this._zoomTarget) {\n          var stillToAdd = _this._zoomTarget - _this.state.zoom;\n\n          _this.zoomAroundMouse(addToZoom + stillToAdd, event);\n        } else {\n          if (animate) {\n            _this.zoomAroundMouse(addToZoom, event);\n          } else {\n            if (!_this._lastWheel || performanceNow() - _this._lastWheel > ANIMATION_TIME) {\n              _this._lastWheel = performanceNow();\n\n              _this.zoomAroundMouse(addToZoom, event);\n            }\n          }\n        }\n      } else {\n        _this.showWarning('wheel');\n      }\n    };\n\n    _this.showWarning = function (warningType) {\n      if (!_this.state.showWarning || _this.state.warningType !== warningType) {\n        _this.setState({\n          showWarning: true,\n          warningType: warningType\n        });\n      }\n\n      if (_this._warningClearTimeout) {\n        window.clearTimeout(_this._warningClearTimeout);\n      }\n\n      _this._warningClearTimeout = window.setTimeout(_this.clearWarning, WARNING_DISPLAY_TIMEOUT);\n    };\n\n    _this.clearWarning = function () {\n      if (_this.state.showWarning) {\n        _this.setState({\n          showWarning: false\n        });\n      }\n    };\n\n    _this.zoomAroundMouse = function (zoomDiff, event) {\n      if (!_this._containerRef) {\n        return;\n      }\n\n      var zoom = _this.state.zoom;\n      var _this$props3 = _this.props,\n          minZoom = _this$props3.minZoom,\n          maxZoom = _this$props3.maxZoom,\n          zoomSnap = _this$props3.zoomSnap;\n      _this._mousePosition = getMousePixel(_this._containerRef, event);\n\n      if (!_this._mousePosition || zoom === minZoom && zoomDiff < 0 || zoom === maxZoom && zoomDiff > 0) {\n        return;\n      }\n\n      var latLngNow = _this.pixelToLatLng(_this._mousePosition);\n\n      var zoomTarget = zoom + zoomDiff;\n\n      if (zoomSnap) {\n        zoomTarget = zoomDiff < 0 ? Math.floor(zoomTarget) : Math.ceil(zoomTarget);\n      }\n\n      zoomTarget = Math.max(minZoom, Math.min(zoomTarget, maxZoom));\n\n      _this.setCenterZoomTarget(null, zoomTarget, false, latLngNow);\n    };\n\n    _this.zoomPlusDelta = function () {\n      return _this.state.zoom + _this.state.zoomDelta;\n    };\n\n    _this.pixelToLatLng = function (pixel) {\n      var center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.state.center;\n      var zoom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this.zoomPlusDelta();\n      var _this$state7 = _this.state,\n          width = _this$state7.width,\n          height = _this$state7.height,\n          pixelDelta = _this$state7.pixelDelta;\n      var pointDiff = [(pixel[0] - width / 2 - (pixelDelta ? pixelDelta[0] : 0)) / 256.0, (pixel[1] - height / 2 - (pixelDelta ? pixelDelta[1] : 0)) / 256.0];\n      var tileX = lng2tile(center[1], zoom) + pointDiff[0];\n      var tileY = lat2tile(center[0], zoom) + pointDiff[1];\n      return [Math.max(absoluteMinMax[0], Math.min(absoluteMinMax[1], tile2lat(tileY, zoom))), Math.max(absoluteMinMax[2], Math.min(absoluteMinMax[3], tile2lng(tileX, zoom)))];\n    };\n\n    _this.latLngToPixel = function (latLng) {\n      var center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.state.center;\n      var zoom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this.zoomPlusDelta();\n      var _this$state8 = _this.state,\n          width = _this$state8.width,\n          height = _this$state8.height,\n          pixelDelta = _this$state8.pixelDelta;\n      var tileCenterX = lng2tile(center[1], zoom);\n      var tileCenterY = lat2tile(center[0], zoom);\n      var tileX = lng2tile(latLng[1], zoom);\n      var tileY = lat2tile(latLng[0], zoom);\n      return [(tileX - tileCenterX) * 256.0 + width / 2 + (pixelDelta ? pixelDelta[0] : 0), (tileY - tileCenterY) * 256.0 + height / 2 + (pixelDelta ? pixelDelta[1] : 0)];\n    };\n\n    _this.calculateZoomCenter = function (center, coords, oldZoom, newZoom) {\n      var _this$state9 = _this.state,\n          width = _this$state9.width,\n          height = _this$state9.height;\n\n      var pixelBefore = _this.latLngToPixel(coords, center, oldZoom);\n\n      var pixelAfter = _this.latLngToPixel(coords, center, newZoom);\n\n      var newCenter = _this.pixelToLatLng([width / 2 + pixelAfter[0] - pixelBefore[0], height / 2 + pixelAfter[1] - pixelBefore[1]], center, newZoom);\n\n      return _this.limitCenterAtZoom(newCenter, newZoom);\n    };\n\n    _this.setRef = function (dom) {\n      _this._containerRef = dom;\n    };\n\n    _this.syncToProps = debounce(_this.syncToProps, DEBOUNCE_DELAY);\n    _this._mousePosition = null;\n    _this._dragStart = null;\n    _this._mouseDown = false;\n    _this._moveEvents = [];\n    _this._lastClick = null;\n    _this._lastTap = null;\n    _this._touchStartPixel = null;\n    _this._isAnimating = false;\n    _this._animationStart = null;\n    _this._animationEnd = null;\n    _this._centerTarget = null;\n    _this._zoomTarget = null; // When users are using uncontrolled components we have to keep this\n    // so we can know if we should call onBoundsChanged\n\n    _this._lastZoom = props.defaultZoom ? props.defaultZoom : props.zoom;\n    _this._lastCenter = props.defaultCenter ? props.defaultCenter : props.center;\n    _this._boundsSynced = false;\n    _this._minMaxCache = null;\n    _this.state = {\n      zoom: _this._lastZoom,\n      center: _this._lastCenter,\n      width: props.width || props.defaultWidth,\n      height: props.height || props.defaultHeight,\n      zoomDelta: 0,\n      pixelDelta: null,\n      oldTiles: [],\n      showWarning: false,\n      warningType: null\n    };\n    return _this;\n  }\n\n  Map.prototype.componentDidMount = function componentDidMount() {\n    this.props.mouseEvents && this.bindMouseEvents();\n    this.props.touchEvents && this.bindTouchEvents();\n\n    if (!this.props.width || !this.props.height) {\n      // A height:100% container div often results in height=0 being returned on mount.\n      // So ask again once everything is painted.\n      if (!this.updateWidthHeight()) {\n        requestAnimationFrame(this.updateWidthHeight);\n      }\n\n      this.bindResizeEvent();\n      this.bindWheelEvent();\n    }\n\n    this.syncToProps();\n  };\n\n  Map.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.props.mouseEvents && this.unbindMouseEvents();\n    this.props.touchEvents && this.unbindTouchEvents();\n\n    if (!this.props.width || !this.props.height) {\n      this.unbindResizeEvent();\n      this.unbindWheelEvent();\n    }\n  };\n\n  Map.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.mouseEvents !== prevProps.mouseEvents) {\n      this.props.mouseEvents ? this.bindMouseEvents() : this.unbindMouseEvents();\n    }\n\n    if (this.props.touchEvents !== prevProps.touchEvents) {\n      this.props.touchEvents ? this.bindTouchEvents() : this.unbindTouchEvents();\n    }\n\n    if (this.props.width && this.props.width !== prevProps.width) {\n      this.setState({\n        width: this.props.width\n      });\n    }\n\n    if (this.props.height && this.props.height !== prevProps.height) {\n      this.setState({\n        height: this.props.height\n      });\n    }\n\n    if (!this.props.center && !this.props.zoom) {\n      // if the user isn't controlling neither zoom nor center we don't have to update.\n      return;\n    }\n\n    if ((!this.props.center || this.props.center[0] === prevProps.center[0] && this.props.center[1] === prevProps.center[1]) && this.props.zoom === prevProps.zoom) {\n      // if the user is controlling either zoom or center but nothing changed\n      // we don't have to update aswell\n      return;\n    }\n\n    var currentCenter = this._isAnimating ? this._centerTarget : this.state.center;\n    var currentZoom = this._isAnimating ? this._zoomTarget : this.state.zoom;\n    var nextCenter = this.props.center || currentCenter; // prevent the rare null errors\n\n    var nextZoom = this.props.zoom || currentZoom;\n\n    if (Math.abs(nextZoom - currentZoom) > 0.001 || Math.abs(nextCenter[0] - currentCenter[0]) > 0.0001 || Math.abs(nextCenter[1] - currentCenter[1]) > 0.0001) {\n      this.setCenterZoomTarget(nextCenter, nextZoom, true);\n    }\n  }; // main logic when changing coordinates\n\n\n  Map.prototype.coordsInside = function coordsInside(pixel) {\n    var _state = this.state,\n        width = _state.width,\n        height = _state.height;\n\n    if (pixel[0] < 0 || pixel[1] < 0 || pixel[0] >= width || pixel[1] >= height) {\n      return false;\n    }\n\n    var parent = this._containerRef;\n    var pos = parentPosition(parent);\n    var element = document.elementFromPoint(pixel[0] + pos.x, pixel[1] + pos.y);\n    return parent === element || parent.contains(element);\n  }; // https://www.bennadel.com/blog/1856-using-jquery-s-animate-step-callback-function-to-create-custom-animations.htm\n  // tools\n  // ref\n  // data to display the tiles\n\n\n  Map.prototype.tileValues = function tileValues(state) {\n    var center = state.center,\n        zoom = state.zoom,\n        pixelDelta = state.pixelDelta,\n        zoomDelta = state.zoomDelta,\n        width = state.width,\n        height = state.height;\n    var roundedZoom = Math.round(zoom + (zoomDelta || 0));\n    var zoomDiff = zoom + (zoomDelta || 0) - roundedZoom;\n    var scale = Math.pow(2, zoomDiff);\n    var scaleWidth = width / scale;\n    var scaleHeight = height / scale;\n    var tileCenterX = lng2tile(center[1], roundedZoom) - (pixelDelta ? pixelDelta[0] / 256.0 / scale : 0);\n    var tileCenterY = lat2tile(center[0], roundedZoom) - (pixelDelta ? pixelDelta[1] / 256.0 / scale : 0);\n    var halfWidth = scaleWidth / 2 / 256.0;\n    var halfHeight = scaleHeight / 2 / 256.0;\n    var tileMinX = Math.floor(tileCenterX - halfWidth);\n    var tileMaxX = Math.floor(tileCenterX + halfWidth);\n    var tileMinY = Math.floor(tileCenterY - halfHeight);\n    var tileMaxY = Math.floor(tileCenterY + halfHeight);\n    return {\n      tileMinX: tileMinX,\n      tileMaxX: tileMaxX,\n      tileMinY: tileMinY,\n      tileMaxY: tileMaxY,\n      tileCenterX: tileCenterX,\n      tileCenterY: tileCenterY,\n      roundedZoom: roundedZoom,\n      zoomDelta: zoomDelta || 0,\n      scaleWidth: scaleWidth,\n      scaleHeight: scaleHeight,\n      scale: scale\n    };\n  }; // display the tiles\n\n\n  Map.prototype.renderTiles = function renderTiles() {\n    var _this2 = this;\n\n    var oldTiles = this.state.oldTiles;\n    var dprs = this.props.dprs;\n    var mapUrl = this.props.provider || wikimedia;\n\n    var _tileValues = this.tileValues(this.state),\n        tileMinX = _tileValues.tileMinX,\n        tileMaxX = _tileValues.tileMaxX,\n        tileMinY = _tileValues.tileMinY,\n        tileMaxY = _tileValues.tileMaxY,\n        tileCenterX = _tileValues.tileCenterX,\n        tileCenterY = _tileValues.tileCenterY,\n        roundedZoom = _tileValues.roundedZoom,\n        scaleWidth = _tileValues.scaleWidth,\n        scaleHeight = _tileValues.scaleHeight,\n        scale = _tileValues.scale;\n\n    var tiles = [];\n\n    for (var i = 0; i < oldTiles.length; i++) {\n      var old = oldTiles[i];\n      var zoomDiff = old.roundedZoom - roundedZoom;\n\n      if (Math.abs(zoomDiff) > 4 || zoomDiff === 0) {\n        continue;\n      }\n\n      var pow = 1 / Math.pow(2, zoomDiff);\n      var xDiff = -(tileMinX - old.tileMinX * pow) * 256;\n      var yDiff = -(tileMinY - old.tileMinY * pow) * 256;\n\n      var _xMin = Math.max(old.tileMinX, 0);\n\n      var _yMin = Math.max(old.tileMinY, 0);\n\n      var _xMax = Math.min(old.tileMaxX, Math.pow(2, old.roundedZoom) - 1);\n\n      var _yMax = Math.min(old.tileMaxY, Math.pow(2, old.roundedZoom) - 1);\n\n      for (var x = _xMin; x <= _xMax; x++) {\n        for (var y = _yMin; y <= _yMax; y++) {\n          tiles.push({\n            key: x + '-' + y + '-' + old.roundedZoom,\n            url: mapUrl(x, y, old.roundedZoom),\n            srcSet: srcSet(dprs, mapUrl, x, y, old.roundedZoom),\n            left: xDiff + (x - old.tileMinX) * 256 * pow,\n            top: yDiff + (y - old.tileMinY) * 256 * pow,\n            width: 256 * pow,\n            height: 256 * pow,\n            active: false\n          });\n        }\n      }\n    }\n\n    var xMin = Math.max(tileMinX, 0);\n    var yMin = Math.max(tileMinY, 0);\n    var xMax = Math.min(tileMaxX, Math.pow(2, roundedZoom) - 1);\n    var yMax = Math.min(tileMaxY, Math.pow(2, roundedZoom) - 1);\n\n    for (var _x13 = xMin; _x13 <= xMax; _x13++) {\n      for (var _y = yMin; _y <= yMax; _y++) {\n        tiles.push({\n          key: _x13 + '-' + _y + '-' + roundedZoom,\n          url: mapUrl(_x13, _y, roundedZoom),\n          srcSet: srcSet(dprs, mapUrl, _x13, _y, roundedZoom),\n          left: (_x13 - tileMinX) * 256,\n          top: (_y - tileMinY) * 256,\n          width: 256,\n          height: 256,\n          active: true\n        });\n      }\n    }\n\n    var boxStyle = {\n      width: scaleWidth,\n      height: scaleHeight,\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      overflow: 'hidden',\n      willChange: 'transform',\n      transform: 'scale(' + scale + ', ' + scale + ')',\n      transformOrigin: 'top left'\n    };\n    var boxClassname = this.props.boxClassname || '';\n    var left = -((tileCenterX - tileMinX) * 256 - scaleWidth / 2);\n    var top = -((tileCenterY - tileMinY) * 256 - scaleHeight / 2);\n    var tilesStyle = {\n      position: 'absolute',\n      width: (tileMaxX - tileMinX + 1) * 256,\n      height: (tileMaxY - tileMinY + 1) * 256,\n      willChange: 'transform',\n      transform: 'translate(' + left + 'px, ' + top + 'px)'\n    };\n    return React__default.createElement('div', {\n      style: boxStyle,\n      className: boxClassname\n    }, React__default.createElement('div', {\n      style: tilesStyle\n    }, tiles.map(function (tile) {\n      return React__default.createElement('img', {\n        key: tile.key,\n        src: tile.url,\n        srcSet: tile.srcSet,\n        width: tile.width,\n        height: tile.height,\n        onLoad: function onLoad() {\n          return _this2.imageLoaded(tile.key);\n        },\n        style: {\n          position: 'absolute',\n          left: tile.left,\n          top: tile.top,\n          willChange: 'transform',\n          transform: tile.transform,\n          transformOrigin: 'top left',\n          opacity: 1\n        }\n      });\n    })));\n  };\n\n  Map.prototype.renderOverlays = function renderOverlays() {\n    var _this3 = this;\n\n    var _state2 = this.state,\n        width = _state2.width,\n        height = _state2.height,\n        center = _state2.center;\n    var mapState = {\n      bounds: this.getBounds(),\n      zoom: this.zoomPlusDelta(),\n      center: center,\n      width: width,\n      height: height\n    };\n    var childrenWithProps = React__default.Children.map(this.props.children, function (child) {\n      if (!child) {\n        return null;\n      }\n\n      if (typeof child.type === 'string') {\n        return child;\n      }\n\n      var _child$props = child.props,\n          anchor = _child$props.anchor,\n          position = _child$props.position,\n          offset = _child$props.offset;\n\n      var c = _this3.latLngToPixel(anchor || position || center);\n\n      return React__default.cloneElement(child, {\n        left: c[0] - (offset ? offset[0] : 0),\n        top: c[1] - (offset ? offset[1] : 0),\n        latLngToPixel: _this3.latLngToPixel,\n        pixelToLatLng: _this3.pixelToLatLng,\n        mapState: mapState\n      });\n    });\n    var childrenStyle = {\n      position: 'absolute',\n      width: width,\n      height: height,\n      top: 0,\n      left: 0\n    };\n    return React__default.createElement('div', {\n      style: childrenStyle\n    }, childrenWithProps);\n  };\n\n  Map.prototype.renderAttribution = function renderAttribution() {\n    var _props = this.props,\n        attribution = _props.attribution,\n        attributionPrefix = _props.attributionPrefix;\n\n    if (attribution === false) {\n      return null;\n    }\n\n    var style = {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      fontSize: '11px',\n      padding: '2px 5px',\n      background: 'rgba(255, 255, 255, 0.7)',\n      fontFamily: \"'Helvetica Neue', Helvetica, Arial, sans-serif\",\n      color: '#333'\n    };\n    var linkStyle = {\n      color: '#0078A8',\n      textDecoration: 'none'\n    };\n    return React__default.createElement('div', {\n      key: 'attr',\n      className: 'pigeon-attribution',\n      style: style\n    }, attributionPrefix === false ? null : React__default.createElement('span', null, attributionPrefix || React__default.createElement('a', {\n      href: 'https://pigeon-maps.js.org/',\n      style: linkStyle\n    }, 'Pigeon'), ' | '), attribution || React__default.createElement('span', null, ' © ', React__default.createElement('a', {\n      href: 'https://www.openstreetmap.org/copyright',\n      style: linkStyle\n    }, 'OpenStreetMap'), ' contributors'));\n  };\n\n  Map.prototype.renderWarning = function renderWarning() {\n    var _props2 = this.props,\n        metaWheelZoom = _props2.metaWheelZoom,\n        metaWheelZoomWarning = _props2.metaWheelZoomWarning,\n        twoFingerDrag = _props2.twoFingerDrag,\n        twoFingerDragWarning = _props2.twoFingerDragWarning,\n        warningZIndex = _props2.warningZIndex;\n    var _state3 = this.state,\n        showWarning = _state3.showWarning,\n        warningType = _state3.warningType,\n        width = _state3.width,\n        height = _state3.height;\n\n    if (metaWheelZoom && metaWheelZoomWarning || twoFingerDrag && twoFingerDragWarning) {\n      var style = {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: width,\n        height: height,\n        overflow: 'hidden',\n        pointerEvents: 'none',\n        opacity: showWarning ? 100 : 0,\n        transition: 'opacity 300ms',\n        background: 'rgba(0,0,0,0.5)',\n        color: '#fff',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 22,\n        fontFamily: '\"Arial\", sans-serif',\n        textAlign: 'center',\n        zIndex: warningZIndex\n      };\n      var meta = typeof window !== 'undefined' && window.navigator && window.navigator.platform.toUpperCase().indexOf('MAC') >= 0 ? '⌘' : '⊞';\n      var warningText = warningType === 'fingers' ? twoFingerDragWarning : metaWheelZoomWarning;\n      return React__default.createElement('div', {\n        style: style\n      }, warningText.replace('META', meta));\n    } else {\n      return null;\n    }\n  };\n\n  Map.prototype.render = function render() {\n    var _props3 = this.props,\n        touchEvents = _props3.touchEvents,\n        twoFingerDrag = _props3.twoFingerDrag;\n    var _state4 = this.state,\n        width = _state4.width,\n        height = _state4.height;\n    var containerStyle = {\n      width: this.props.width ? width : '100%',\n      height: this.props.height ? height : '100%',\n      position: 'relative',\n      display: 'inline-block',\n      overflow: 'hidden',\n      background: '#dddddd',\n      touchAction: touchEvents ? twoFingerDrag ? 'pan-x pan-y' : 'none' : 'auto'\n    };\n    var hasSize = !!(width && height);\n    return React__default.createElement('div', {\n      style: containerStyle,\n      ref: this.setRef\n    }, hasSize && this.renderTiles(), hasSize && this.renderOverlays(), hasSize && this.renderAttribution(), hasSize && this.renderWarning());\n  };\n\n  return Map;\n}(React.Component);\n\nMap.defaultProps = {\n  animate: true,\n  metaWheelZoom: false,\n  metaWheelZoomWarning: 'Use META+wheel to zoom!',\n  twoFingerDrag: false,\n  twoFingerDragWarning: 'Use two fingers to move the map',\n  zoomSnap: true,\n  mouseEvents: true,\n  touchEvents: true,\n  warningZIndex: 100,\n  animateMaxScreens: 5,\n  minZoom: 1,\n  maxZoom: 18,\n  limitBounds: 'center',\n  dprs: []\n};\nprocess.env.NODE_ENV !== \"production\" ? Map.propTypes = {\n  center: PropTypes.array,\n  defaultCenter: PropTypes.array,\n  zoom: PropTypes.number,\n  defaultZoom: PropTypes.number,\n  width: PropTypes.number,\n  defaultWidth: PropTypes.number,\n  height: PropTypes.number,\n  defaultHeight: PropTypes.number,\n  provider: PropTypes.func,\n  dprs: PropTypes.array,\n  children: PropTypes.node,\n  animate: PropTypes.bool,\n  animateMaxScreens: PropTypes.number,\n  minZoom: PropTypes.number,\n  maxZoom: PropTypes.number,\n  metaWheelZoom: PropTypes.bool,\n  metaWheelZoomWarning: PropTypes.string,\n  twoFingerDrag: PropTypes.bool,\n  twoFingerDragWarning: PropTypes.string,\n  warningZIndex: PropTypes.number,\n  attribution: PropTypes.any,\n  attributionPrefix: PropTypes.any,\n  zoomSnap: PropTypes.bool,\n  mouseEvents: PropTypes.bool,\n  touchEvents: PropTypes.bool,\n  onClick: PropTypes.func,\n  onBoundsChanged: PropTypes.func,\n  onAnimationStart: PropTypes.func,\n  onAnimationStop: PropTypes.func,\n  // will be set to \"edge\" from v0.12 onward, defaulted to \"center\" before\n  limitBounds: PropTypes.oneOf(['center', 'edge'])\n} : void 0;\nmodule.exports = Map;","map":null,"metadata":{},"sourceType":"script"}